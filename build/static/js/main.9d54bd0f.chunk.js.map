{"version":3,"sources":["FoldableImage.js","Slider.js","SingleAxisDemo.js","App.js","serviceWorker.js","index.js","background.jpg"],"names":["convertPercentageToRotation","percentage","Wrapper","styled","div","Half","props","width","height","TopHalf","BottomHalf","Backside","Shadow","FlickerFixer","FoldableImage","alt","src","backgroundImage","style","transform","backgroundPosition","opacity","RcSliderWithTooltip","createSliderWithTooltip","RcSlider","SLIDER_WIDTH","window","innerWidth","styles","vertical","position","paddingLeft","trackStyle","background","railStyle","handleStyle","left","SLIDER_BAR_WIDTH","borderRadius","cursor","touchAction","horizontal","paddingTop","top","Slider","this","label","orientation","withTooltip","delegatedProps","SliderComponent","Label","SliderStyles","Component","defaultProps","createGlobalStyle","SingleAxisDemo","state","axisValue","defaultValue","isHovering","updateSliderVal","val","setState","handleMouseEnter","handleMouseLeave","id","children","showNote","hideOverflow","delegated","overflow","Box","onMouseEnter","onMouseLeave","ChildWrapper","SliderWrapper","value","onChange","PureComponent","App","className","to","config","tension","friction","interpolated","foldDemoImageSrc","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.9d54bd0f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst FoldableImage = ({ width, height, alt, percentage, src }) => {\r\n  const backgroundImage = `url(${src})`;\r\n\r\n  return (\r\n    <Wrapper\r\n      style={{\r\n        transform: `translateY(${percentage / 4}%)`\r\n      }}\r\n    >\r\n      <TopHalf width={width} height={height}>\r\n        <img\r\n          src={src}\r\n          alt={alt}\r\n          style={{\r\n            width,\r\n            height\r\n          }}\r\n        />\r\n      </TopHalf>\r\n      <BottomHalf\r\n        width={width}\r\n        height={height}\r\n        style={{\r\n          backgroundImage,\r\n          backgroundPosition: \"0 100%\",\r\n          transform: `rotateX(${convertPercentageToRotation(percentage)}deg)`\r\n        }}\r\n      >\r\n        <Shadow\r\n          style={{\r\n            opacity: percentage * 0.015\r\n          }}\r\n        />\r\n        <Backside />\r\n      </BottomHalf>\r\n\r\n      {/*\r\n        Because the entire card is translating down during the fold, I'm\r\n        seeing a flicker in the crook of the fold. Repeating our trick a third\r\n        time, I can apply the image to a 2px-tall element positioned in the\r\n        crook of the fold.\r\n        If you aren't translating the card during folding, you shouldn't need\r\n        this fix.\r\n      */}\r\n      <FlickerFixer\r\n        height={height}\r\n        style={{\r\n          opacity: percentage > 50 ? 0 : 1,\r\n          backgroundImage\r\n        }}\r\n      />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst convertPercentageToRotation = percentage => percentage * 1.8;\r\n\r\nconst Wrapper = styled.div`\r\n  display: inline-block;\r\n  perspective: 1250px;\r\n`;\r\n\r\nconst Half = styled.div`\r\n  position: relative;\r\n  z-index: 2;\r\n  width: ${props => props.width}px;\r\n  height: ${props => props.height / 2}px;\r\n  background-size: cover;\r\n`;\r\n\r\nconst TopHalf = styled(Half)`\r\n  border-radius: 10px 10px 0 0;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst BottomHalf = styled(Half)`\r\n  transform-origin: top center;\r\n  transform-style: preserve-3d;\r\n  border-radius: 0 0 10px 10px;\r\n`;\r\n\r\nconst Backside = styled.div`\r\n  position: absolute;\r\n  top: -1px;\r\n  left: -1px;\r\n  right: -1px;\r\n  bottom: -1px;\r\n  background: rgba(255, 255, 255, 0.9);\r\n  transform: rotateX(180deg) translateZ(2px);\r\n  backface-visibility: hidden;\r\n  border-radius: 10px 10px 0 0;\r\n`;\r\n\r\nconst Shadow = styled.div`\r\n  position: absolute;\r\n  z-index: 3;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: #000;\r\n  backface-visibility: hidden;\r\n  border-radius: 0 0 10px 10px;\r\n  transform: translateZ(0.01px);\r\n`;\r\n\r\nconst FlickerFixer = styled.div`\r\n  position: absolute;\r\n  z-index: 1;\r\n  top: ${props => props.height * 0.5}px;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 2px;\r\n  background-position: 0% 50%;\r\n`;\r\n\r\nexport default FoldableImage;\r\n","// @flow\r\nimport React, { Component, Fragment } from \"react\";\r\nimport styled, { createGlobalStyle } from \"styled-components\";\r\nimport RcSlider, { createSliderWithTooltip } from \"rc-slider\";\r\n\r\ntype Props = {\r\n  label?: string,\r\n  min?: number,\r\n  max?: number,\r\n  step?: number,\r\n  value?: number,\r\n  defaultValue?: number,\r\n  orientation: \"vertical\" | \"horizontal\",\r\n  withTooltip: boolean,\r\n  onChange: (val: number) => void\r\n};\r\n\r\nconst RcSliderWithTooltip = createSliderWithTooltip(RcSlider);\r\n\r\nconst IS_MOBILE =\r\n  typeof window === \"undefined\" ? false : window.innerWidth < 450;\r\n\r\nconst SLIDER_WIDTH = IS_MOBILE ? 28 : 16;\r\nconst SLIDER_BAR_WIDTH = 2;\r\n\r\nconst styles = {\r\n  vertical: {\r\n    style: {\r\n      position: \"relative\",\r\n      height: \"100%\",\r\n      width: SLIDER_WIDTH,\r\n      paddingLeft: SLIDER_WIDTH / 2\r\n    },\r\n    trackStyle: {\r\n      position: \"absolute\",\r\n      width: SLIDER_BAR_WIDTH,\r\n      background: \"rgba(0, 0, 0, 0.7)\"\r\n    },\r\n    railStyle: {\r\n      position: \"absolute\",\r\n      width: SLIDER_BAR_WIDTH,\r\n      height: \"100%\",\r\n      background: \"rgba(0, 0, 0, 0.15)\"\r\n    },\r\n    handleStyle: [\r\n      {\r\n        position: \"absolute\",\r\n        left: SLIDER_WIDTH / 2 + SLIDER_BAR_WIDTH / 2,\r\n        background: \"black\",\r\n        width: SLIDER_WIDTH,\r\n        height: SLIDER_WIDTH,\r\n        transform: \"translate(-50%, 50%)\",\r\n        borderRadius: \"50%\",\r\n        cursor: \"grab\",\r\n        touchAction: \"pan-x\"\r\n      }\r\n    ]\r\n  },\r\n  horizontal: {\r\n    style: {\r\n      position: \"relative\",\r\n      width: \"100%\",\r\n      height: SLIDER_WIDTH,\r\n      paddingTop: SLIDER_WIDTH / 2\r\n    },\r\n    trackStyle: {\r\n      position: \"absolute\",\r\n      height: SLIDER_BAR_WIDTH,\r\n      background: \"rgba(0, 0, 0, 0.7)\"\r\n    },\r\n    railStyle: {\r\n      position: \"absolute\",\r\n      width: \"100%\",\r\n      height: SLIDER_BAR_WIDTH,\r\n      background: \"rgba(0, 0, 0, 0.15)\"\r\n    },\r\n    handleStyle: [\r\n      {\r\n        position: \"absolute\",\r\n        top: SLIDER_WIDTH / 2 + SLIDER_BAR_WIDTH / 2,\r\n        background: \"#FFF\",\r\n        width: SLIDER_WIDTH,\r\n        height: SLIDER_WIDTH,\r\n        transform: \"translate(-50%, -50%)\",\r\n        borderRadius: \"50%\",\r\n        cursor: \"grab\",\r\n        touchAction: \"pan-x\"\r\n      }\r\n    ]\r\n  }\r\n};\r\n\r\nclass Slider extends Component<Props> {\r\n  static defaultProps = {\r\n    orientation: \"vertical\"\r\n  };\r\n\r\n  render() {\r\n    const { label, orientation, withTooltip, ...delegatedProps } = this.props;\r\n\r\n    const SliderComponent = withTooltip ? RcSliderWithTooltip : RcSlider;\r\n\r\n    return (\r\n      <Fragment>\r\n        {label && <Label>{label}</Label>}\r\n\r\n        <SliderComponent\r\n          vertical={orientation === \"vertical\"}\r\n          {...delegatedProps}\r\n          {...styles[orientation]}\r\n        />\r\n\r\n        <SliderStyles />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// HACK: RC Slider uses specific class names for styling, so we'll just use\r\n// those.\r\n// TODO: Use the `xStyle` overrides so that we can support vertical and\r\n// horizontal\r\n\r\nconst SliderStyles = createGlobalStyle`\r\n  .rc-slider {\r\n  }\r\n  .rc-slider .rc-slider-handle:active {\r\n    cursor: grabbing !important;\r\n  }\r\n  .rc-slider-tooltip {\r\n    position: absolute;\r\n    opacity: 1;\r\n    will-change: opacity;\r\n    transition: opacity 500ms;\r\n    border-radius: 2px;\r\n  }\r\n  .rc-slider-tooltip-hidden {\r\n    opacity: 0;\r\n  }\r\n`;\r\n\r\nconst Label = styled.div`\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  margin-bottom: ${SLIDER_WIDTH * 0.75 + \"px\"};\r\n`;\r\n\r\nexport default Slider;\r\n","import React, { PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Slider from \"./Slider\";\r\n\r\nclass SingleAxisDemo extends PureComponent {\r\n  static propTypes = {\r\n    // `id` is for Google Analytics\r\n    id: PropTypes.string.isRequired,\r\n    height: PropTypes.number,\r\n    defaultValue: PropTypes.number,\r\n    showNote: PropTypes.bool,\r\n    hideOverflow: PropTypes.bool,\r\n    children: PropTypes.func.isRequired\r\n  };\r\n\r\n  static defaultProps = {\r\n    height: 200,\r\n    defaultValue: 0,\r\n    showNote: false\r\n  };\r\n\r\n  state = {\r\n    axisValue: this.props.defaultValue,\r\n    isHovering: false\r\n  };\r\n\r\n  updateSliderVal = val => {\r\n    this.setState({ axisValue: val });\r\n  };\r\n\r\n  handleMouseEnter = () => this.setState({ isHovering: true });\r\n  handleMouseLeave = () => this.setState({ isHovering: false });\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      height,\r\n      showNote,\r\n      children,\r\n      hideOverflow,\r\n      ...delegated\r\n    } = this.props;\r\n    const { isHovering, axisValue } = this.state;\r\n\r\n    return (\r\n      <Wrapper style={{ overflow: hideOverflow ? \"hidden\" : \"visible\" }}>\r\n        <Box\r\n          onMouseEnter={this.handleMouseEnter}\r\n          onMouseLeave={this.handleMouseLeave}\r\n        >\r\n          <ChildWrapper>{children(axisValue)}</ChildWrapper>\r\n\r\n          <SliderWrapper>\r\n            <Slider\r\n              {...delegated}\r\n              value={axisValue}\r\n              height={height}\r\n              onChange={this.updateSliderVal}\r\n            />\r\n          </SliderWrapper>\r\n        </Box>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nconst ChildWrapper = styled.div`\r\n  flex: 1;\r\n  padding: 30px;\r\n  text-align: center;\r\n`;\r\n\r\nconst Box = styled.div`\r\n  display: flex;\r\n  border: 1px solid rgba(0, 0, 0, 0.1);\r\n  border-radius: 5px;\r\n  &:hover {\r\n    border-color: rgba(0, 0, 0, 0.18);\r\n  }\r\n`;\r\n\r\nconst SliderWrapper = styled.div`\r\n  display: flex;\r\n  padding: 30px;\r\n  background: rgba(0, 0, 0, 0.1);\r\n  border-radius: 0 4px 4px 0;\r\n  ${Box}:hover & {\r\n    background: rgba(0, 0, 0, 0.18);\r\n  }\r\n`;\r\n\r\nexport default SingleAxisDemo;\r\n","import React from \"react\";\nimport { Spring } from \"react-spring/renderprops\";\n\nimport foldDemoImageSrc from \"./background.jpg\";\nimport FoldableImage from \"./FoldableImage\";\nimport SingleAxisDemo from \"./SingleAxisDemo\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <SingleAxisDemo showNote={true} defaultValue={100} id={1}>\n          {percentage => {\n            const width = 375;\n            const height = width * (4 / 3);\n\n            return (\n              <Spring\n                to={{ percentage }}\n                config={{\n                  tension: 120,\n                  friction: 90\n                }}\n              >\n                {interpolated => (\n                  <FoldableImage\n                    alt=\"A neon alley with a Chinese sign\"\n                    width={width}\n                    height={height}\n                    percentage={interpolated.percentage}\n                    src={foldDemoImageSrc}\n                  />\n                )}\n              </Spring>\n            );\n          }}\n        </SingleAxisDemo>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/background.08565afd.jpg\";"],"sourceRoot":""}